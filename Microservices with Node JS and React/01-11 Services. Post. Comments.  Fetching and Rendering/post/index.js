const express = require('express');
const bodyParser = require('body-parser');
const { randomBytes } = require('crypto'); // встроенный модуль Node
const cors = require('cors');
/*
CORS - это пакет node.js для предоставления промежуточного программного обеспечения Connect / Express, 
которое можно использовать для включения CORS с различными параметрами 

cors - это мидлвар к express, библиотеке работающей на сервере 
Если стороннее апи не отдает CORS заголовки с клиентской части Вы его никак не запросите, но можно 
проксировать запрос у себя на сервере 

axios - HTTP-клиент на основе Promise (обещаний) для браузера и node.js 
*/

const app = express();
app.use(bodyParser.json());
app.use(cors());

const posts = {};

app.get('/posts',(req,res) =>{
    res.send(posts);
});

app.post('/posts',(req,res) =>{
    const id = randomBytes(4).toString('hex'); // numObj.toString([radix]),  radix - необязательный параметр. Целое число между 2 и 36, определяющее основание системы счисления, используемой для представления числового значения.
    const {title} = req.body; // body-parser извлекает всю часть тела входящего потока запросов и предоставляет его на req.body.
    // мы можем работать без body-parser. вы получите необработанный запрос, тело и заголовки не находятся в корневом объекте. придется индивидуально манипулировать всеми полями
	/*

    bodyParser.raw(): фактически не анализирует тело, req.body просто отправляет буферное содержимое из буфера в req.body.

    bodyParser.text(): Читает буфер как обычный текст и предоставляет результирующую строку на req.body.

    bodyParser.urlencoded(): анализирует текст в виде URL-кодированных данных (как браузеры, как правило, отправляют данные формы из обычных форм, установленных в POST) и предоставляет результирующий объект (содержащий ключи и значения) для req.body. Для сравнения; в PHP все это автоматически выполняется и отображается в $_POST.

    bodyParser.json(): анализирует текст как JSON // req.body результирующий объект */
    posts[id] = { // т.е. это будет объект с полями {gf4:{gf4:"myPost1"},34fg:{34fg:"Post#2"}......}
        id, title
    };

    res.status(201).send(posts[id]); // HTTP 201 Created Код ответа об успешном статусе указывает, что запрос выполнен успешно и привел к созданию ресурса. Новый ресурс эффективно создается до отправки этого ответа. И новый ресурс возвращается в теле сообщения, его местоположение представляет собой либо URL-адрес запроса, либо содержимое заголовка Location

});

app.listen(4000, () =>{
    console.log('Listening on 4000')
});